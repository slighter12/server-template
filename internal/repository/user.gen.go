// Code generated by proxy-generator. DO NOT EDIT.
package repository

import (
	"context"
	"server-template/internal/domain/entity"
	"server-template/internal/domain/repository"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
)

type UserRepositoryProxy struct {
	UserRepository repository.UserRepository
}

// newUserRepositoryProxy creates a new proxy with OpenTelemetry instrumentation
func newUserRepositoryProxy(base repository.UserRepository) repository.UserRepository {
	return &UserRepositoryProxy{
		UserRepository: base,
	}
}

// ProvideUserRepositoryProxy returns a function that decorates the original implementation with OpenTelemetry instrumentation
func ProvideUserRepositoryProxy(enableTracing bool, base repository.UserRepository) repository.UserRepository {
	if !enableTracing {
		return base
	}
	
	return newUserRepositoryProxy(base)
}

func (p *UserRepositoryProxy) Create(ctx context.Context, user *entity.User) (error) {
	tracer := otel.Tracer("user-repo-tracer")
	ctx, span := tracer.Start(ctx, "Create")
	defer span.End()

	err := p.UserRepository.Create(ctx, user)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return err
}

func (p *UserRepositoryProxy) FindByEmail(ctx context.Context, email string) (*entity.User, error) {
	tracer := otel.Tracer("user-repo-tracer")
	ctx, span := tracer.Start(ctx, "FindByEmail")
	defer span.End()

	ret0, err := p.UserRepository.FindByEmail(ctx, email)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return ret0, err
}

func (p *UserRepositoryProxy) FindByID(ctx context.Context, id string) (*entity.User, error) {
	tracer := otel.Tracer("user-repo-tracer")
	ctx, span := tracer.Start(ctx, "FindByID")
	defer span.End()

	ret0, err := p.UserRepository.FindByID(ctx, id)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return ret0, err
}
