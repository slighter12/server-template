// Code generated by proxy-generator. DO NOT EDIT.
package usecase

import (
	"context"
	"server-template/internal/domain/entity"
	"server-template/internal/domain/usecase"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
)

type AuthUseCaseProxy struct {
	AuthUseCase usecase.AuthUseCase
}

// newAuthUseCaseProxy creates a new proxy with OpenTelemetry instrumentation
func newAuthUseCaseProxy(base usecase.AuthUseCase) usecase.AuthUseCase {
	return &AuthUseCaseProxy{
		AuthUseCase: base,
	}
}

// ProvideAuthUseCaseProxy returns a function that decorates the original implementation with OpenTelemetry instrumentation
func ProvideAuthUseCaseProxy(enableTracing bool, base usecase.AuthUseCase) usecase.AuthUseCase {
	if !enableTracing {
		return base
	}
	
	return newAuthUseCaseProxy(base)
}

func (p *AuthUseCaseProxy) Register(ctx context.Context, email string, hashedPassword string) (*entity.User, error) {
	tracer := otel.Tracer("auth-usecase-tracer")
	ctx, span := tracer.Start(ctx, "Register")
	defer span.End()

	ret0, err := p.AuthUseCase.Register(ctx, email, hashedPassword)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return ret0, err
}

func (p *AuthUseCaseProxy) Login(ctx context.Context, email string, hashedPassword string) (*entity.User, error) {
	tracer := otel.Tracer("auth-usecase-tracer")
	ctx, span := tracer.Start(ctx, "Login")
	defer span.End()

	ret0, err := p.AuthUseCase.Login(ctx, email, hashedPassword)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return ret0, err
}
