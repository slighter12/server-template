// Code generated by proxy-generator. DO NOT EDIT.
package usecase

import (
	"context"
	"server-template/internal/domain/entity"
	"server-template/internal/domain/usecase"
	"server-template/proto/pb/authpb"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"
)

type AuthHTTPUseCaseProxy struct {
	AuthHTTPUseCase usecase.AuthHTTPUseCase
}

// newAuthHTTPUseCaseProxy creates a new proxy with OpenTelemetry instrumentation
func newAuthHTTPUseCaseProxy(base usecase.AuthHTTPUseCase) usecase.AuthHTTPUseCase {
	return &AuthHTTPUseCaseProxy{
		AuthHTTPUseCase: base,
	}
}

// ProvideAuthHTTPUseCaseProxy returns a function that decorates the original implementation with OpenTelemetry instrumentation
func ProvideAuthHTTPUseCaseProxy(enableTracing bool, base usecase.AuthHTTPUseCase) usecase.AuthHTTPUseCase {
	if !enableTracing {
		return base
	}
	
	return newAuthHTTPUseCaseProxy(base)
}

func (p *AuthHTTPUseCaseProxy) Register(ctx context.Context, email string, password string) (string, *entity.User, error) {
	tracer := otel.Tracer("auth-http-usecase-tracer")
	ctx, span := tracer.Start(ctx, "Register")
	defer span.End()

	ret0, ret1, err := p.AuthHTTPUseCase.Register(ctx, email, password)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return ret0, ret1, err
}

func (p *AuthHTTPUseCaseProxy) Login(ctx context.Context, email string, password string) (string, *entity.User, error) {
	tracer := otel.Tracer("auth-http-usecase-tracer")
	ctx, span := tracer.Start(ctx, "Login")
	defer span.End()

	ret0, ret1, err := p.AuthHTTPUseCase.Login(ctx, email, password)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return ret0, ret1, err
}

func (p *AuthHTTPUseCaseProxy) Logout(ctx context.Context, token string) (error) {
	tracer := otel.Tracer("auth-http-usecase-tracer")
	ctx, span := tracer.Start(ctx, "Logout")
	defer span.End()

	err := p.AuthHTTPUseCase.Logout(ctx, token)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return err
}

func (p *AuthHTTPUseCaseProxy) ValidateToken(ctx context.Context, token string) (*authpb.ValidateTokenResponse, error) {
	tracer := otel.Tracer("auth-http-usecase-tracer")
	ctx, span := tracer.Start(ctx, "ValidateToken")
	defer span.End()

	ret0, err := p.AuthHTTPUseCase.ValidateToken(ctx, token)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
	}

	return ret0, err
}
